package main

import (
	"errors"
	"flag"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"xinde/configs"
	_ "xinde/docs" // docs is generated by Swag CLI, you have to import it.
	"xinde/internal/router"
	"xinde/internal/store"
	"xinde/pkg/logger"

	"github.com/spf13/viper"
	"go.uber.org/zap"
)

// @title           xinde API
// @version         1.0
// @description     This is a sample server for xinde.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /api/v1
// 定义一个变量来接收命令行参数
var configFile = flag.String("f", "./configs/config.yaml", "the config file path")

func main() {
	// 1. 解析命令行参数
	flag.Parse()

	// 2. 初始化日志
	logger.InitLogger()

	// 3. 使用 flag 传入的路径初始化配置
	if err := configs.InitConfig(*configFile); err != nil {
		logger.Fatal("Error initializing config", zap.Error(err))
	}
	logger.Info("配置文件加载成功", zap.String("path", *configFile))

	// 4. 初始化数据库
	if err := store.InitDB(); err != nil {
		logger.Fatal("Failed to initialize database", zap.Error(err))
	}
	logger.Info("数据库连接成功")

	// 5. 初始化路由
	r, err := router.InitRouter()
	if err != nil {
		logger.Fatal("Failed to initialize router", zap.Error(err))
	}
	logger.Info("路由组创建成功")

	// 6. 创建 HTTP 服务器实例
	port := viper.GetInt("server.port")
	srv := &http.Server{
		Addr:    fmt.Sprintf(":%d", port),
		Handler: r,
	}

	// 7. 启动服务器在一个单独的 goroutine 中
	go func() {
		logger.Info(fmt.Sprintf("服务正在启动，监听端口: %d", port))
		if err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
			logger.Fatal("服务器启动失败", zap.Error(err))
		}
	}()

	// 8. 实现优雅退出
	// 创建一个 channel 来接收系统信号
	quit := make(chan os.Signal, 1)
	// 我们只关心 SIGINT (Ctrl+C) 和 SIGTERM (Docker stop 发送的信号)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// 阻塞主 goroutine，直到接收到一个信号
	<-quit
	logger.Info("接收到关闭信号，正在关闭服务器...")

	// 创建一个有超时的 context，用于通知服务器在 5 秒内完成现有请求
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// 调用 Shutdown() 来优雅地关闭服务器
	if err := srv.Shutdown(ctx); err != nil {
		logger.Fatal("服务器关闭失败", zap.Error(err))
	}

	logger.Info("服务器已成功关闭")
}
