package main

import (
	"fmt"

	"xinde/configs"
	_ "xinde/docs" // docs is generated by Swag CLI, you have to import it.
	"xinde/internal/router"
	"xinde/internal/store"
	"xinde/pkg/logger"

	"github.com/spf13/viper"
	"go.uber.org/zap"
)

// @title           xinde API
// @version         1.0
// @description     This is a sample server for xinde.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /api/v1
func main() {
	// Initialize logger
	logger.InitLogger()

	// Initialize configuration
	if err := configs.InitConfig(); err != nil {
		logger.Error("Error initializing config", zap.Error(err))
		return // Exit if config fails to load
	}
	logger.Info("配置文件加载成功")

	// Initialize database
	if err := store.InitDB(); err != nil {
		logger.Error("Failed to initialize database", zap.Error(err))
	}
	logger.Info("数据库连接成功")

	// Create a new Gin router
	router, err := router.InitRouter()
	if err != nil {
		logger.Panic(err.Error())
	}
	logger.Info("路由组创建成功")

	// Start the server
	port := viper.GetInt("server.port")

	logger.Info(fmt.Sprintf("服务运行于端口: %d", port))

	if err := router.Run(fmt.Sprintf(":%d", port)); err != nil {
		logger.Error("Failed to start server", zap.Error(err))
	}

}
