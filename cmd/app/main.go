package main

import (
	"fmt"
	"log"

	_ "xinde/docs" // docs is generated by Swag CLI, you have to import it.
	"xinde/configs"
	"xinde/pkg/logger"

	"github.com/gin-gonic/gin"
	"github.com/spf13/viper"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"go.uber.org/zap"
)

// @title           xinde API
// @version         1.0
// @description     This is a sample server for xinde.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /api/v1
func main() {
	// Initialize logger
	logger.InitLogger()

	// Initialize configuration
	if err := configs.InitConfig(); err != nil {
		log.Fatalf("Error initializing config: %s", err)
	}

	// Create a new Gin router
	router := gin.Default()

	// Swagger
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Ping test
	router.GET("/ping", Ping)

	// Start the server
	port := viper.GetInt("server.port")
	logger.Info(fmt.Sprintf("Starting server on port %d", port))

	if err := router.Run(fmt.Sprintf(":%d", port)); err != nil {
		logger.Error("Failed to start server", zap.Error(err))
	}
}

// Ping godoc
// @Summary      Ping server
// @Description  do ping
// @Tags         health
// @Accept       json
// @Produce      json
// @Success      200  {object}  map[string]interface{}
// @Router       /ping [get]
func Ping(c *gin.Context) {
	c.JSON(200, gin.H{
		"message": "pong",
	})
}
